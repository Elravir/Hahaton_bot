import time
import schedule
from telebot import types
from datetime import datetime
import random
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CallbackContext, CallbackQueryHandler, Filters, MessageHandler, TypeHandler
import json
import requests
from bs4 import BeautifulSoup
from keyboa.keyboard import Keyboa
from telebot import TeleBot
from aiogram.types import ReplyKeyboardRemove as RKR, \
    ReplyKeyboardMarkup as RKM, KeyboardButton as KB, \
    InlineKeyboardMarkup as IKM, InlineKeyboardButton as IKB
ask_reply_markup = ReplyKeyboardMarkup([['Заказать']], resize_keyboard=True)
perem_zakazi_magaz=[]

ask_reply_markup1 = ReplyKeyboardMarkup([['Отмена']], resize_keyboard=True)
ask_reply_markup2 = ReplyKeyboardMarkup([['Получить инфу от заказавших']], resize_keyboard=True)

def get_coin_side(): # функция которая проверяет есть ли уже сделанные заказы
    return 'Показываем рестораны к которым можно присоедениться: <тут должен быть список ресторанов>' if len(perem_zakazi_magaz) > 0 else 'Самому сделать заказ'


coin_inline_keyboard_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("Вкусно и точка", callback_data='parsing_vkusochka')],
        [InlineKeyboardButton("Пиццерони", callback_data='flip_a_coin_again')],
        [InlineKeyboardButton("Суши WOK", callback_data='flip_a_coin_again')]
    ])

main_user_id = 316600126 #id пользователя который будет основным заказчиком  и работником

def zakazat_restorani(update: Update, context: CallbackContext):
    print("qweryuuio000000000")
    update.message.reply_text(text='Выберите ресторан:', reply_markup=coin_inline_keyboard_markup) # исправить на coin_inline_keyboard_markup!!!!!!!!!!coin_inline_keyboard_markup_vkusochka
    context.bot.send_message(chat_id=update.effective_chat.id, text ='Нажмите отмена, если хотите вернуться в начало!', reply_markup=ask_reply_markup1)
    #context.bot.send_message(chat_id=update.effective_chat.id, text=update.effective_chat.id)



def parsing_vkusochka(update: Update, context: CallbackContext) -> None:
    print("qweryuuio111111111")
    #button_hi = KB('Привет!')
    #greet_kb = RKM()
    #greet_kb.add(button_hi)
    #context.bot.send_message(chat_id=update.effective_chat.id, text="menu:", reply_markup=greet_kb)

    #text = f'{get_coin_side()}\nОтредактировано: {datetime.datetime.now().isoformat()}'
    #update.callback_query.edit_message_text(text=text, reply_markup=coin_inline_keyboard_markup)
    #update.message.reply_text(parcing, reply_markup=spisok_vsex_rest)
    
    #coin_inline_keyboard_markup_vkusochka = Keyboa(items=vkusochka, copy_text_to_callback=True)
    #context.bot.send_message(chat_id=update.effective_chat.id, text="menu:", reply_markup=coin_inline_keyboard_markup_vkusochka)
    keyboard = types.InlineKeyboardMarkup()
    for i in vkusochka:
        keyboard.add(types.InlineKeyboardButton(json.dumps(i), callback_data='parse_kafe'))
    context.bot.send_message(chat_id=update.effective_chat.id, text="menu:", reply_markup=keyboard)
#coin_inline_keyboard_markup_vkusochka = InlineKeyboardMarkup([[InlineKeyboardButton("Dodo", callback_data='parse_kafe')]])
    #coin_inline_keyboard_markup_vkusochka = InlineKeyboardMarkup([])
    #coin_inline_keyboard_markup_vkusochka.row_width = 1
    
    #for i in vkusochka:
     #   inline_btn_1 = InlineKeyboardButton(i, callback_data='button1')
      #  coin_inline_keyboard_markup_vkusochka = InlineKeyboardMarkup().add(inline_btn_1)




def get_random_number(): #функция генерации числа
    return random.randint(0, 100)



#def new_random_number(update: Update, context: CallbackContext) -> None:
    #text = f'{get_random_number()}\nОтредактировано: {datetime.datetime.now().isoformat()}'
    #update.callback_query.edit_message_text(text=text, reply_markup=number_inline_keyboard_markup)

#def echo(update: Update, context: CallbackContext) -> None:
    #text = json.dumps(update.to_dict(), indent=2)
    #context.bot.send_message(chat_id=update.effective_chat.id, text=user.id)




spisok_vsex_rest = InlineKeyboardMarkup([
        [InlineKeyboardButton("Dodo", callback_data='parse_kafe')],
        [InlineKeyboardButton("Вкусно и точка", callback_data='parse_kafe')],
        [InlineKeyboardButton("Полет", callback_data='parse_kafe')]
    ])    
def otvet_zakaz():
    return 'Выберите ресторан:'

def pokaz_rest(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(otvet_zakaz(), reply_markup=spisok_vsex_rest)
    context.bot.send_message(chat_id=update.effective_chat.id, text='Dodo, Вкусно и точка, Полет',
                            reply_markup=ask_reply_markup)

def osnovnoi_zakaz(update: Update, context: CallbackContext) -> None:
    if main_user_id == 316600126:
        context.bot.send_message(chat_id=update.effective_chat.id, text='Показ списка товаров которые нужно заказать:',
                                reply_markup=ask_reply_markup2)



def nachalo(update: Update) -> None:
    update.callback_query.edit_message_text(text="Hollla", reply_markup=ask_reply_markup)


def ask_what_to_do(update: Update, context: CallbackContext) -> None:
    context.bot.send_message(chat_id=update.effective_chat.id, text='Что вы хотите сделать?',
                             reply_markup=ask_reply_markup)


def main() -> None:
    
    updater = Updater("5734431889:AAFnu9JnzAU00pSfqnkHNpunxuADd1avlVY")
    updater.dispatcher.add_handler(CallbackQueryHandler(parsing_vkusochka, pattern='^parsing_vkusochka'))
    #updater.dispatcher.add_handler(CallbackQueryHandler(parcing, pattern='^parcing'))
    updater.dispatcher.add_handler(
        MessageHandler(Filters.update.message & Filters.text('Заказать'), zakazat_restorani)) #вызов функции которая срабатывает при слове Заказать 
    updater.dispatcher.add_handler(
        MessageHandler(Filters.update.message & Filters.text('Самому сделать заказ'), pokaz_rest))
    updater.dispatcher.add_handler(TypeHandler(Update, ask_what_to_do)) #ask_what_to_do
    nachalo
    
    updater.start_polling()
    #parcing
    print('Started')


    updater.idle()


#вкусно и точка пеперони и суши вок

if __name__ == "__main__":
    schedule.every().day.at("13:20").do(osnovnoi_zakaz)
    
    url=f"https://vkusnoitochka.ru/menu"
    response=requests.get(url)
    soup=BeautifulSoup(response.text,'lxml')
    data=soup.find_all("li",class_="catalog-product base-grid-item")
    vkusochka=[]
    for i in data:
        name=i.find("div",class_="catalog-product-title").text.replace("\n","")
        price=i.find("p","catalog-product__price").text
        d = " ".join(price.split( )[1:])
        #print(name," - "," ".join(price.split( )[1:]))
        f=name+" "
        for i in d:
            f += i
        vkusochka.append(f)
        print(f)
    #coin_inline_keyboard_markup_vkusochka = InlineKeyboardMarkup([[InlineKeyboardButton("Dodo", callback_data='parse_kafe')]])
    #coin_inline_keyboard_markup_vkusochka = InlineKeyboardMarkup([])
    #coin_inline_keyboard_markup_vkusochka.row_width = 1
    
    #for i in vkusochka:
     #   inline_btn_1 = InlineKeyboardButton(i, callback_data='button1')
      #  coin_inline_keyboard_markup_vkusochka = InlineKeyboardMarkup().add(inline_btn_1)
    print(vkusochka)

    main()

while True:
    schedule.run_pending()
    time.sleep(1)
